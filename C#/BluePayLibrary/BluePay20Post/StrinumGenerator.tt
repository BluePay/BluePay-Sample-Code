<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

<# 
	string fileName = this.Host.ResolvePath("Strinums.txt");
	var lines = System.IO.File.ReadLines(fileName)
		.Select(ln => ln.Trim())
		.Where(ln => ln.Length > 0 && ln[0] != '#');

		
#>/* 
Autogenerated file. Do not edit directly 
//
// Type-safe stringlike enums are used because the result codes are controlled
// by the service. As things are added/changed within the service it will be easier for a
// caller of this library to adapt without having to rebuild everything.
//
*/
using System;

namespace BluePayLibrary.Interfaces.BluePay20Post.BindataTypes { 

<#
	string name = null;
	foreach(var ln in lines)
	{
		var idx = ln.IndexOf('-');
		if(idx == -1) 
		{
			EndStruct();
			name = ln;
			BeginStruct(ln);
		}
		else
		{
			var val = ln.Substring(0, idx).Trim();
			if(val.Length == 0)
				val = " "; //a single space

			var prop = ln.Substring(idx+1).Trim();
			string doc = "";
			var docIdx = prop.IndexOf('-');
			if(docIdx > -1) {
				doc = prop.Substring(docIdx+1).Trim();
				prop = prop.Substring(0, docIdx).Trim();
			}

			WriteConstant(name, val, prop, doc);
		}
	}
	
	EndStruct();
#>
}

<#+
private bool isInStruct = false;
private void BeginStruct(string name)
{
	isInStruct = true;
#>
	public partial struct <#= name #> : IComparable<<#= name #>>, IEquatable<<#= name #>>
	{
		
		public int CompareTo(<#= name #> other)
        {
            return StringComparer.InvariantCulture.Compare(Value, other.Value);
        }

        public bool Equals(<#= name #> other)
        {
            return StringComparer.InvariantCulture.Equals(Value, other.Value);
        }

        public static bool operator ==(<#= name #> a, <#= name #> b)
        {
            return a.Equals(b);
        }

        public static bool operator !=(<#= name #> a, <#= name #> b)
        {
            return !(a == b);
        }

        public override bool Equals(object obj)
        {
            var other = obj as <#= name #>?;
            if (other == null)
                return false;

            return this.Equals(other.Value);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }

        public override string ToString()
        {
            return Value;
        }

        public string Value { get; }

        public <#= name #>(string value)
        {
            Value = value;
        }

        public bool IsSet { get { return !string.IsNullOrEmpty(Value); }}
<#+
}

private void EndStruct()
{
	if(!isInStruct)
		return;
	isInStruct = false;
#>
	}
<#+
}

private void WriteConstant(string name, string val, string prop, string doc)
{
#>

        /// <summary>
        /// <#= doc #>
        /// </summary>
        public static <#= name #> <#= prop #> = new <#= name #>("<#= val #>");
<#+
}
#>