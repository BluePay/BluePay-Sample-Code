
/* 
Autogenerated file. Do not edit directly 
//
// Type-safe stringlike enums are used because the result codes are controlled
// by the service. As things are added/changed within the service it will be easier for a
// caller of this library to adapt without having to rebuild everything.
//
*/
using System;

namespace BluePayLibrary.Interfaces.BluePay20Post.BindataTypes { 

	public partial struct CardType : IComparable<CardType>, IEquatable<CardType>
	{
		
		public int CompareTo(CardType other)
        {
            return StringComparer.InvariantCulture.Compare(Value, other.Value);
        }

        public bool Equals(CardType other)
        {
            return StringComparer.InvariantCulture.Equals(Value, other.Value);
        }

        public static bool operator ==(CardType a, CardType b)
        {
            return a.Equals(b);
        }

        public static bool operator !=(CardType a, CardType b)
        {
            return !(a == b);
        }

        public override bool Equals(object obj)
        {
            var other = obj as CardType?;
            if (other == null)
                return false;

            return this.Equals(other.Value);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }

        public override string ToString()
        {
            return Value;
        }

        public string Value { get; }

        public CardType(string value)
        {
            Value = value;
        }

        public bool IsSet { get { return !string.IsNullOrEmpty(Value); }}

        /// <summary>
        /// 
        /// </summary>
        public static CardType Visa = new CardType("V");

        /// <summary>
        /// 
        /// </summary>
        public static CardType MasterCard = new CardType("M");

        /// <summary>
        /// 
        /// </summary>
        public static CardType AmericanExpress = new CardType("A");

        /// <summary>
        /// 
        /// </summary>
        public static CardType Discover = new CardType("D");

        /// <summary>
        /// PIN Only (Non-Visa/MasterCard/Amex/Discover)
        /// </summary>
        public static CardType PinOnly = new CardType("N");
	}
	public partial struct CardUsage : IComparable<CardUsage>, IEquatable<CardUsage>
	{
		
		public int CompareTo(CardUsage other)
        {
            return StringComparer.InvariantCulture.Compare(Value, other.Value);
        }

        public bool Equals(CardUsage other)
        {
            return StringComparer.InvariantCulture.Equals(Value, other.Value);
        }

        public static bool operator ==(CardUsage a, CardUsage b)
        {
            return a.Equals(b);
        }

        public static bool operator !=(CardUsage a, CardUsage b)
        {
            return !(a == b);
        }

        public override bool Equals(object obj)
        {
            var other = obj as CardUsage?;
            if (other == null)
                return false;

            return this.Equals(other.Value);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }

        public override string ToString()
        {
            return Value;
        }

        public string Value { get; }

        public CardUsage(string value)
        {
            Value = value;
        }

        public bool IsSet { get { return !string.IsNullOrEmpty(Value); }}

        /// <summary>
        /// Credit Hybrid (meaning it has pin capability also)
        /// </summary>
        public static CardUsage CreditHybrid = new CardUsage("C");

        /// <summary>
        /// PIN Only Debit with Electronic Benefit Transfer
        /// </summary>
        public static CardUsage PinDebitEbt = new CardUsage("E");

        /// <summary>
        /// Debit Hybrid (PIN and Signature)
        /// </summary>
        public static CardUsage DebitHybrid = new CardUsage("H");

        /// <summary>
        /// USA Commercial Debit, Signature Only, No PIN Access
        /// </summary>
        public static CardUsage UsaCommercialDebitSigNoPin = new CardUsage("J");

        /// <summary>
        /// USA Commercial Debit, PIN Capable
        /// </summary>
        public static CardUsage UsaCommercialDebitPin = new CardUsage("K");

        /// <summary>
        /// Non USA Consumer Debit, No PIN Access
        /// </summary>
        public static CardUsage NonUsaConsumerDebitNoPin = new CardUsage("L");

        /// <summary>
        /// Non USA Commercial Debit, No PIN Access
        /// </summary>
        public static CardUsage NonUsaCommercialDebitNoPin = new CardUsage("M");

        /// <summary>
        /// Non USA Consumer Debit, PIN Capable
        /// </summary>
        public static CardUsage NonUsaConsumerDebitPin = new CardUsage("N");

        /// <summary>
        /// Non USA Commercial Debit, PIN Capable
        /// </summary>
        public static CardUsage NonUsaCommercialDebitPin = new CardUsage("O");

        /// <summary>
        /// PIN Only Debit without Electronic Benefit Transfer
        /// </summary>
        public static CardUsage PinDebit = new CardUsage("P");

        /// <summary>
        /// Private Label Credit (MasterCard)
        /// </summary>
        public static CardUsage PrivateLabelCredit = new CardUsage("R");

        /// <summary>
        /// Signature only Debit, No PIN Access
        /// </summary>
        public static CardUsage SignatureOnlyDebit = new CardUsage("S");

        /// <summary>
        /// True credit, No PIN/Signature capability
        /// </summary>
        public static CardUsage Credit = new CardUsage("X");
	}
	public partial struct Networks : IComparable<Networks>, IEquatable<Networks>
	{
		
		public int CompareTo(Networks other)
        {
            return StringComparer.InvariantCulture.Compare(Value, other.Value);
        }

        public bool Equals(Networks other)
        {
            return StringComparer.InvariantCulture.Equals(Value, other.Value);
        }

        public static bool operator ==(Networks a, Networks b)
        {
            return a.Equals(b);
        }

        public static bool operator !=(Networks a, Networks b)
        {
            return !(a == b);
        }

        public override bool Equals(object obj)
        {
            var other = obj as Networks?;
            if (other == null)
                return false;

            return this.Equals(other.Value);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }

        public override string ToString()
        {
            return Value;
        }

        public string Value { get; }

        public Networks(string value)
        {
            Value = value;
        }

        public bool IsSet { get { return !string.IsNullOrEmpty(Value); }}

        /// <summary>
        /// PAVD FISERV
        /// </summary>
        public static Networks PavdFiserv = new Networks("A5");

        /// <summary>
        /// SHAZAM
        /// </summary>
        public static Networks Shazam = new Networks("01");

        /// <summary>
        /// NYCE
        /// </summary>
        public static Networks Nyce = new Networks("02");

        /// <summary>
        /// PULSE
        /// </summary>
        public static Networks Pulse = new Networks("03");

        /// <summary>
        /// STAR-WEST
        /// </summary>
        public static Networks StarWest = new Networks("05");

        /// <summary>
        /// STAR-EAST
        /// </summary>
        public static Networks StarEast = new Networks("07");

        /// <summary>
        /// STAR NE
        /// </summary>
        public static Networks StarNe = new Networks("14");

        /// <summary>
        /// PAVD
        /// </summary>
        public static Networks Pavd = new Networks("15");

        /// <summary>
        /// CNB-ENID
        /// </summary>
        public static Networks CnbEnid = new Networks("16");

        /// <summary>
        /// ATH-SCOTIA BANK
        /// </summary>
        public static Networks AthScotiaBank = new Networks("17");

        /// <summary>
        /// ATH-DIRECT
        /// </summary>
        public static Networks AthDirect = new Networks("18");

        /// <summary>
        /// INTERLINK
        /// </summary>
        public static Networks Interlink = new Networks("19");

        /// <summary>
        /// INTERAC EVERLINK
        /// </summary>
        public static Networks InteracEverlink = new Networks("20");

        /// <summary>
        /// EVERLINK INTERAC ICU
        /// </summary>
        public static Networks EverlinkInteracIcu = new Networks("21");

        /// <summary>
        /// MAESTRO DIRECT
        /// </summary>
        public static Networks MaestroDirect = new Networks("25");

        /// <summary>
        /// MCX
        /// </summary>
        public static Networks Mcx = new Networks("26");

        /// <summary>
        /// EBT ACS
        /// </summary>
        public static Networks EbtAcs = new Networks("29");

        /// <summary>
        /// MAESTRO STAR WEST
        /// </summary>
        public static Networks MaestroStarWest = new Networks("30");

        /// <summary>
        /// STAR WEST OPTION
        /// </summary>
        public static Networks StarWestOption = new Networks("31");

        /// <summary>
        /// JEANIE STAR WEST
        /// </summary>
        public static Networks JeanieStarWest = new Networks("33");

        /// <summary>
        /// JEANIE DIRECT
        /// </summary>
        public static Networks JeanieDirect = new Networks("34");

        /// <summary>
        /// AFFN DIRECT
        /// </summary>
        public static Networks AffnDirect = new Networks("35");

        /// <summary>
        /// CU24-DIRECT
        /// </summary>
        public static Networks Cu24Direct = new Networks("36");

        /// <summary>
        /// EBT TEAM OF TEXAS
        /// </summary>
        public static Networks EbtTeamOfTexas = new Networks("37");

        /// <summary>
        /// EBT JPCHASE
        /// </summary>
        public static Networks EbtJpchase = new Networks("39");

        /// <summary>
        /// SVS
        /// </summary>
        public static Networks Svs = new Networks("41");

        /// <summary>
        /// EXXON
        /// </summary>
        public static Networks Exxon = new Networks("42");

        /// <summary>
        /// BASE 24/INTERAC
        /// </summary>
        public static Networks Base24Interac = new Networks("43");

        /// <summary>
        /// CU24-FIDELITY
        /// </summary>
        public static Networks Cu24Fidelity = new Networks("46");

        /// <summary>
        /// EBT EFUNDS
        /// </summary>
        public static Networks EbtEfunds = new Networks("47");

        /// <summary>
        /// AFFN FIDELITY
        /// </summary>
        public static Networks AffnFidelity = new Networks("48");

        /// <summary>
        /// EBT NORTHRUP GRUMMAN
        /// </summary>
        public static Networks EbtNorthrupGrumman = new Networks("49");

        /// <summary>
        /// CU24-FISERV
        /// </summary>
        public static Networks Cu24Fiserv = new Networks("51");

        /// <summary>
        /// AFFN FISERV
        /// </summary>
        public static Networks AffnFiserv = new Networks("52");

        /// <summary>
        /// STAR-EAST FISERV
        /// </summary>
        public static Networks StarEastFiserv = new Networks("56");

        /// <summary>
        /// PULSE FISERV
        /// </summary>
        public static Networks PulseFiserv = new Networks("57");

        /// <summary>
        /// NYCE FISERV
        /// </summary>
        public static Networks NyceFiserv = new Networks("59");

        /// <summary>
        /// STAR-WEST FISERV
        /// </summary>
        public static Networks StarWestFiserv = new Networks("62");

        /// <summary>
        /// STAR NE FISERV
        /// </summary>
        public static Networks StarNeFiserv = new Networks("63");

        /// <summary>
        /// MAESTRO FISERV
        /// </summary>
        public static Networks MaestroFiserv = new Networks("64");

        /// <summary>
        /// INTERLINK FISERV
        /// </summary>
        public static Networks InterlinkFiserv = new Networks("65");

        /// <summary>
        /// EBT-FISERV
        /// </summary>
        public static Networks EbtFiserv = new Networks("67");

        /// <summary>
        /// ACCEL FISERV
        /// </summary>
        public static Networks AccelFiserv = new Networks("68");

        /// <summary>
        /// OPTION-FISERV
        /// </summary>
        public static Networks OptionFiserv = new Networks("69");

        /// <summary>
        /// PINLESS POS
        /// </summary>
        public static Networks PinlessPos = new Networks("A");

        /// <summary>
        /// PINNED POS, PINLESS BILLPAY
        /// </summary>
        public static Networks PinnedPosPinlessBillpay = new Networks("B");

        /// <summary>
        /// PINLESS BILLPAY, PINLESS POS
        /// </summary>
        public static Networks PinlessBillpayPinlessPos = new Networks("C");

        /// <summary>
        /// PINNED POS, PINLESS POS
        /// </summary>
        public static Networks PinnedPosPinlessPos = new Networks("D");

        /// <summary>
        /// PINNED POS, PINLESS BILLPAY, PINLESS POS
        /// </summary>
        public static Networks PinnedPosPinlessBillpayPinlessPos = new Networks("E");

        /// <summary>
        /// PINLESS BILLPAY
        /// </summary>
        public static Networks PinlessBillpay = new Networks("L");

        /// <summary>
        /// PINNED POS
        /// </summary>
        public static Networks PinnedPos = new Networks("P");
	}
	public partial struct Prepaid : IComparable<Prepaid>, IEquatable<Prepaid>
	{
		
		public int CompareTo(Prepaid other)
        {
            return StringComparer.InvariantCulture.Compare(Value, other.Value);
        }

        public bool Equals(Prepaid other)
        {
            return StringComparer.InvariantCulture.Equals(Value, other.Value);
        }

        public static bool operator ==(Prepaid a, Prepaid b)
        {
            return a.Equals(b);
        }

        public static bool operator !=(Prepaid a, Prepaid b)
        {
            return !(a == b);
        }

        public override bool Equals(object obj)
        {
            var other = obj as Prepaid?;
            if (other == null)
                return false;

            return this.Equals(other.Value);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }

        public override string ToString()
        {
            return Value;
        }

        public string Value { get; }

        public Prepaid(string value)
        {
            Value = value;
        }

        public bool IsSet { get { return !string.IsNullOrEmpty(Value); }}

        /// <summary>
        /// Not a Prepaid Card
        /// </summary>
        public static Prepaid NotAPrepaidCard = new Prepaid(" ");

        /// <summary>
        /// Prepaid Card
        /// </summary>
        public static Prepaid PrepaidCard = new Prepaid("P");
	}
	public partial struct CardProductSubCategory : IComparable<CardProductSubCategory>, IEquatable<CardProductSubCategory>
	{
		
		public int CompareTo(CardProductSubCategory other)
        {
            return StringComparer.InvariantCulture.Compare(Value, other.Value);
        }

        public bool Equals(CardProductSubCategory other)
        {
            return StringComparer.InvariantCulture.Equals(Value, other.Value);
        }

        public static bool operator ==(CardProductSubCategory a, CardProductSubCategory b)
        {
            return a.Equals(b);
        }

        public static bool operator !=(CardProductSubCategory a, CardProductSubCategory b)
        {
            return !(a == b);
        }

        public override bool Equals(object obj)
        {
            var other = obj as CardProductSubCategory?;
            if (other == null)
                return false;

            return this.Equals(other.Value);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }

        public override string ToString()
        {
            return Value;
        }

        public string Value { get; }

        public CardProductSubCategory(string value)
        {
            Value = value;
        }

        public bool IsSet { get { return !string.IsNullOrEmpty(Value); }}

        /// <summary>
        /// Visa Traditional
        /// </summary>
        public static CardProductSubCategory VisaTraditional = new CardProductSubCategory("A");

        /// <summary>
        /// Visa Traditional Rewards
        /// </summary>
        public static CardProductSubCategory VisaTraditionalRewards = new CardProductSubCategory("B");

        /// <summary>
        /// Visa Signature
        /// </summary>
        public static CardProductSubCategory VisaSignature = new CardProductSubCategory("C");

        /// <summary>
        /// Visa Signature Preferred
        /// </summary>
        public static CardProductSubCategory VisaSignaturePreferred = new CardProductSubCategory("D");

        /// <summary>
        /// Visa Proprietary ATM
        /// </summary>
        public static CardProductSubCategory VisaProprietaryAtm = new CardProductSubCategory("E");

        /// <summary>
        /// Visa Classic
        /// </summary>
        public static CardProductSubCategory VisaClassic = new CardProductSubCategory("F");

        /// <summary>
        /// Visa Business
        /// </summary>
        public static CardProductSubCategory VisaBusiness = new CardProductSubCategory("G");

        /// <summary>
        /// Visa Signature Business (non-US)
        /// </summary>
        public static CardProductSubCategory VisaSignatureBusinessNonUs = new CardProductSubCategory("G1");

        /// <summary>
        /// Visa Business Tier 3 (US)
        /// </summary>
        public static CardProductSubCategory VisaBusinessTier3Us = new CardProductSubCategory("G1");

        /// <summary>
        /// Visa Business Enhanced (non-US)
        /// </summary>
        public static CardProductSubCategory VisaBusinessEnhancedNonUs = new CardProductSubCategory("G3");

        /// <summary>
        /// Visa Business Tier 2 (US)
        /// </summary>
        public static CardProductSubCategory VisaBusinessTier2Us = new CardProductSubCategory("G3");

        /// <summary>
        /// Visa Infinite Business (non-US)
        /// </summary>
        public static CardProductSubCategory VisaInfiniteBusinessNonUs = new CardProductSubCategory("G4");

        /// <summary>
        /// Visa Business Tier 4 (US)
        /// </summary>
        public static CardProductSubCategory VisaBusinessTier4Us = new CardProductSubCategory("G4");

        /// <summary>
        /// Visa Business Rewards
        /// </summary>
        public static CardProductSubCategory VisaBusinessRewards = new CardProductSubCategory("G5");

        /// <summary>
        /// Visa Infinite
        /// </summary>
        public static CardProductSubCategory VisaInfinite = new CardProductSubCategory("I^");

        /// <summary>
        /// Visa Infinite Privilege
        /// </summary>
        public static CardProductSubCategory VisaInfinitePrivilege = new CardProductSubCategory("I1");

        /// <summary>
        /// Visa Ultra High Net Worth
        /// </summary>
        public static CardProductSubCategory VisaUltraHighNetWorth = new CardProductSubCategory("I2");

        /// <summary>
        /// Visa Healthcare
        /// </summary>
        public static CardProductSubCategory VisaHealthcare = new CardProductSubCategory("J3");

        /// <summary>
        /// Visa Corporate T&E
        /// </summary>
        public static CardProductSubCategory VisaCorporateTE = new CardProductSubCategory("K^");

        /// <summary>
        /// Visa GSA Corporate T&E (US)?Visa Government Corporate T&E (global)
        /// </summary>
        public static CardProductSubCategory VisaGsaCorporateTEUsVisaGovernmentCorporateTEGlobal = new CardProductSubCategory("K1");

        /// <summary>
        /// Visa Electron
        /// </summary>
        public static CardProductSubCategory VisaElectron = new CardProductSubCategory("L^");

        /// <summary>
        /// Visa Platinum
        /// </summary>
        public static CardProductSubCategory VisaPlatinum = new CardProductSubCategory("N^");

        /// <summary>
        /// Visa Rewards
        /// </summary>
        public static CardProductSubCategory VisaRewards = new CardProductSubCategory("N1");

        /// <summary>
        /// Visa Select
        /// </summary>
        public static CardProductSubCategory VisaSelect = new CardProductSubCategory("N2");

        /// <summary>
        /// Visa Gold
        /// </summary>
        public static CardProductSubCategory VisaGold = new CardProductSubCategory("P^");

        /// <summary>
        /// Visa Private Label
        /// </summary>
        public static CardProductSubCategory VisaPrivateLabel = new CardProductSubCategory("Q^");

        /// <summary>
        /// Visa Private Label Basic
        /// </summary>
        public static CardProductSubCategory VisaPrivateLabelBasic = new CardProductSubCategory("Q2");

        /// <summary>
        /// Visa Private Label Standard
        /// </summary>
        public static CardProductSubCategory VisaPrivateLabelStandard = new CardProductSubCategory("Q3");

        /// <summary>
        /// Visa Private Label Enhanced
        /// </summary>
        public static CardProductSubCategory VisaPrivateLabelEnhanced = new CardProductSubCategory("Q4");

        /// <summary>
        /// Visa Private Label Specialized
        /// </summary>
        public static CardProductSubCategory VisaPrivateLabelSpecialized = new CardProductSubCategory("Q5");

        /// <summary>
        /// Visa Private Label Premium
        /// </summary>
        public static CardProductSubCategory VisaPrivateLabelPremium = new CardProductSubCategory("Q6");

        /// <summary>
        /// Visa Proprietary
        /// </summary>
        public static CardProductSubCategory VisaProprietary = new CardProductSubCategory("R^");

        /// <summary>
        /// Visa Purchasing
        /// </summary>
        public static CardProductSubCategory VisaPurchasing = new CardProductSubCategory("S^");

        /// <summary>
        /// Visa Purchasing with Fleet
        /// </summary>
        public static CardProductSubCategory VisaPurchasingWithFleet = new CardProductSubCategory("S1");

        /// <summary>
        /// Visa GSA Purchasing (US)?Visa Government Purchasing (Global)
        /// </summary>
        public static CardProductSubCategory VisaGsaPurchasingUsVisaGovernmentPurchasingGlobal = new CardProductSubCategory("S2");

        /// <summary>
        /// Visa GSA Purchasing with Fleet (US)?Visa Government Purchasing With Fleet (global)
        /// </summary>
        public static CardProductSubCategory VisaGsaPurchasingWithFleetUsVisaGovernmentPurchasingWithFleetGlobal = new CardProductSubCategory("S3");

        /// <summary>
        /// Visa Government Services Loan
        /// </summary>
        public static CardProductSubCategory VisaGovernmentServicesLoan = new CardProductSubCategory("S4");

        /// <summary>
        /// Visa Commercial Transport (EBT)
        /// </summary>
        public static CardProductSubCategory VisaCommercialTransportEbt = new CardProductSubCategory("S5");

        /// <summary>
        /// Visa Business Loan
        /// </summary>
        public static CardProductSubCategory VisaBusinessLoan = new CardProductSubCategory("S6");

        /// <summary>
        /// Visa Travel Money
        /// </summary>
        public static CardProductSubCategory VisaTravelMoney = new CardProductSubCategory("U^");

        /// <summary>
        /// Visa V Pay
        /// </summary>
        public static CardProductSubCategory VisaVPay = new CardProductSubCategory("V^");

        /// <summary>
        /// MasterCard Business Premium Debit
        /// </summary>
        public static CardProductSubCategory MastercardBusinessPremiumDebit = new CardProductSubCategory("BPD");

        /// <summary>
        /// MasterCard Gold Debit MasterCard Salary
        /// </summary>
        public static CardProductSubCategory MastercardGoldDebitMastercardSalary = new CardProductSubCategory("DAG");

        /// <summary>
        /// MasterCard Platinum Debit MasterCard Salary
        /// </summary>
        public static CardProductSubCategory MastercardPlatinumDebitMastercardSalary = new CardProductSubCategory("DAP");

        /// <summary>
        /// MasterCard Standard Debit MasterCard Salary
        /// </summary>
        public static CardProductSubCategory MastercardStandardDebitMastercardSalary = new CardProductSubCategory("DAS");

        /// <summary>
        /// MasterCard Gold Delayed Debit
        /// </summary>
        public static CardProductSubCategory MastercardGoldDelayedDebit = new CardProductSubCategory("DLG");

        /// <summary>
        /// MasterCard World Embossed Delayed Debit
        /// </summary>
        public static CardProductSubCategory MastercardWorldEmbossedDelayedDebit = new CardProductSubCategory("DLH");

        /// <summary>
        /// MasterCard Platinum Delayed Debit
        /// </summary>
        public static CardProductSubCategory MastercardPlatinumDelayedDebit = new CardProductSubCategory("DLP");

        /// <summary>
        /// MasterCard Card Delayed Debit
        /// </summary>
        public static CardProductSubCategory MastercardCardDelayedDebit = new CardProductSubCategory("DLS");

        /// <summary>
        /// MasterCard Standard Debit Social
        /// </summary>
        public static CardProductSubCategory MastercardStandardDebitSocial = new CardProductSubCategory("DOS");

        /// <summary>
        /// MasterCard World Elite for Business
        /// </summary>
        public static CardProductSubCategory MastercardWorldEliteForBusiness = new CardProductSubCategory("MAB");

        /// <summary>
        /// MasterCard World Elite Corporate Card
        /// </summary>
        public static CardProductSubCategory MastercardWorldEliteCorporateCard2 = new CardProductSubCategory("MAC");

        /// <summary>
        /// MasterCard MAP Commercial Payments Account
        /// </summary>
        public static CardProductSubCategory MastercardMapCommercialPaymentsAccount = new CardProductSubCategory("MAP");

        /// <summary>
        /// MasterCard Prepaid Commercial Payments Account
        /// </summary>
        public static CardProductSubCategory MastercardPrepaidCommercialPaymentsAccount = new CardProductSubCategory("MAQ");

        /// <summary>
        /// MasterCard Prepaid Consumer
        /// </summary>
        public static CardProductSubCategory MastercardPrepaidConsumer = new CardProductSubCategory("MBB");

        /// <summary>
        /// MasterCard Prepaid Voucher
        /// </summary>
        public static CardProductSubCategory MastercardPrepaidVoucher = new CardProductSubCategory("MBC");

        /// <summary>
        /// MasterCard Professional Debit BusinessCard Card
        /// </summary>
        public static CardProductSubCategory MastercardProfessionalDebitBusinesscardCard = new CardProductSubCategory("MBD");

        /// <summary>
        /// MasterCard Electronic Business Card
        /// </summary>
        public static CardProductSubCategory MastercardElectronicBusinessCard = new CardProductSubCategory("MBE");

        /// <summary>
        /// MasterCard Prepaid Food
        /// </summary>
        public static CardProductSubCategory MastercardPrepaidFood = new CardProductSubCategory("MBF");

        /// <summary>
        /// MasterCard Black Card
        /// </summary>
        public static CardProductSubCategory MastercardBlackCard = new CardProductSubCategory("MBK");

        /// <summary>
        /// MasterCard Prepaid Meal
        /// </summary>
        public static CardProductSubCategory MastercardPrepaidMeal = new CardProductSubCategory("MBM");

        /// <summary>
        /// MasterCard Corporate Prepaid
        /// </summary>
        public static CardProductSubCategory MastercardCorporatePrepaid = new CardProductSubCategory("MBP");

        /// <summary>
        /// MasterCard B2B Product
        /// </summary>
        public static CardProductSubCategory MastercardB2BProduct = new CardProductSubCategory("MBS");

        /// <summary>
        /// MasterCard Corporate Prepaid Travel
        /// </summary>
        public static CardProductSubCategory MastercardCorporatePrepaidTravel = new CardProductSubCategory("MBT");

        /// <summary>
        /// MasterCard World MasterCard Black Edition Debit
        /// </summary>
        public static CardProductSubCategory MastercardWorldMastercardBlackEditionDebit = new CardProductSubCategory("MBW");

        /// <summary>
        /// MasterCard Business Card
        /// </summary>
        public static CardProductSubCategory MastercardBusinessCard = new CardProductSubCategory("MCB");

        /// <summary>
        /// MasterCard Credit Card (Mixed BIN)
        /// </summary>
        public static CardProductSubCategory MastercardCreditCardMixedBin = new CardProductSubCategory("MCC");

        /// <summary>
        /// MasterCard Debit Card
        /// </summary>
        public static CardProductSubCategory MastercardDebitCard = new CardProductSubCategory("MCD");

        /// <summary>
        /// MasterCard Electronic Card
        /// </summary>
        public static CardProductSubCategory MastercardElectronicCard = new CardProductSubCategory("MCE");

        /// <summary>
        /// MasterCard Fleet Card
        /// </summary>
        public static CardProductSubCategory MastercardFleetCard = new CardProductSubCategory("MCF");

        /// <summary>
        /// MasterCard Gold Card
        /// </summary>
        public static CardProductSubCategory MastercardGoldCard = new CardProductSubCategory("MCG");

        /// <summary>
        /// MasterCard Premium Charge
        /// </summary>
        public static CardProductSubCategory MastercardPremiumCharge = new CardProductSubCategory("MCH");

        /// <summary>
        /// MasterCard Corporate Card
        /// </summary>
        public static CardProductSubCategory MastercardCorporateCard = new CardProductSubCategory("MCO");

        /// <summary>
        /// MasterCard Purchasing Card
        /// </summary>
        public static CardProductSubCategory MastercardPurchasingCard = new CardProductSubCategory("MCP");

        /// <summary>
        /// MasterCard Standard Card
        /// </summary>
        public static CardProductSubCategory MastercardStandardCard = new CardProductSubCategory("MCS");

        /// <summary>
        /// MasterCard Titanium Card
        /// </summary>
        public static CardProductSubCategory MastercardTitaniumCard = new CardProductSubCategory("MCT");

        /// <summary>
        /// MasterCard Merchant-Branded Program
        /// </summary>
        public static CardProductSubCategory MastercardMerchantBrandedProgram = new CardProductSubCategory("MCV");

        /// <summary>
        /// MasterCard World Card
        /// </summary>
        public static CardProductSubCategory MastercardWorldCard2 = new CardProductSubCategory("MCW");

        /// <summary>
        /// MasterCard Business Debit Card
        /// </summary>
        public static CardProductSubCategory MastercardBusinessDebitCard = new CardProductSubCategory("MDB");

        /// <summary>
        /// MasterCard Gold Debit Card
        /// </summary>
        public static CardProductSubCategory MastercardGoldDebitCard = new CardProductSubCategory("MDG");

        /// <summary>
        /// MasterCard Other Embossed Debit Card
        /// </summary>
        public static CardProductSubCategory MastercardOtherEmbossedDebitCard = new CardProductSubCategory("MDH");

        /// <summary>
        /// MasterCard Debit Enhanced
        /// </summary>
        public static CardProductSubCategory MastercardDebitEnhanced = new CardProductSubCategory("MDJ");

        /// <summary>
        /// MasterCard Business Debit Other Embossed
        /// </summary>
        public static CardProductSubCategory MastercardBusinessDebitOtherEmbossed = new CardProductSubCategory("MDL");

        /// <summary>
        /// MasterCard Debit Other
        /// </summary>
        public static CardProductSubCategory MastercardDebitOther = new CardProductSubCategory("MDO");

        /// <summary>
        /// MasterCard Platinum Debit Card
        /// </summary>
        public static CardProductSubCategory MastercardPlatinumDebitCard = new CardProductSubCategory("MDP");

        /// <summary>
        /// MasterCard Debit Brokerage 1
        /// </summary>
        public static CardProductSubCategory MastercardDebitBrokerage1 = new CardProductSubCategory("MDR");

        /// <summary>
        /// MasterCard Debit Card
        /// </summary>
        public static CardProductSubCategory MastercardDebitCard2 = new CardProductSubCategory("MDS");

        /// <summary>
        /// MasterCard Commercial Debit Card
        /// </summary>
        public static CardProductSubCategory MastercardCommercialDebitCard = new CardProductSubCategory("MDT");

        /// <summary>
        /// MasterCard World Black Debit (LAC region excluding Mexico)
        /// </summary>
        public static CardProductSubCategory MastercardWorldBlackDebitLacRegionExcludingMexico = new CardProductSubCategory("MDW");

        /// <summary>
        /// MasterCard Executive Business Card
        /// </summary>
        public static CardProductSubCategory MastercardExecutiveBusinessCard = new CardProductSubCategory("MEB");

        /// <summary>
        /// MasterCard Electronic Commercial
        /// </summary>
        public static CardProductSubCategory MastercardElectronicCommercial = new CardProductSubCategory("MEC");

        /// <summary>
        /// MasterCard Electronic Payment Account
        /// </summary>
        public static CardProductSubCategory MastercardElectronicPaymentAccount = new CardProductSubCategory("MEF");

        /// <summary>
        /// MasterCard Corporate Executive Card
        /// </summary>
        public static CardProductSubCategory MastercardCorporateExecutiveCard = new CardProductSubCategory("MEO");

        /// <summary>
        /// MasterCard Flex World Elite
        /// </summary>
        public static CardProductSubCategory MastercardFlexWorldElite = new CardProductSubCategory("MFB");

        /// <summary>
        /// MasterCard Flex Platinum
        /// </summary>
        public static CardProductSubCategory MastercardFlexPlatinum = new CardProductSubCategory("MFD");

        /// <summary>
        /// MasterCard Flex Charge World Elite
        /// </summary>
        public static CardProductSubCategory MastercardFlexChargeWorldElite = new CardProductSubCategory("MFE");

        /// <summary>
        /// MasterCard Flex World
        /// </summary>
        public static CardProductSubCategory MastercardFlexWorld = new CardProductSubCategory("MFH");

        /// <summary>
        /// MasterCard Flex Charge Platinum
        /// </summary>
        public static CardProductSubCategory MastercardFlexChargePlatinum = new CardProductSubCategory("MFL");

        /// <summary>
        /// MasterCard Flex Charge World
        /// </summary>
        public static CardProductSubCategory MastercardFlexChargeWorld = new CardProductSubCategory("MFW");

        /// <summary>
        /// MasterCard Government Commercial Card
        /// </summary>
        public static CardProductSubCategory MastercardGovernmentCommercialCard = new CardProductSubCategory("MGF");

        /// <summary>
        /// MasterCard Healthcare Prepaid Non-Tax
        /// </summary>
        public static CardProductSubCategory MastercardHealthcarePrepaidNonTax = new CardProductSubCategory("MHA");

        /// <summary>
        /// MasterCard HSA Substantiated
        /// </summary>
        public static CardProductSubCategory MastercardHsaSubstantiated = new CardProductSubCategory("MHB");

        /// <summary>
        /// MasterCard HELOC Debit Standard
        /// </summary>
        public static CardProductSubCategory MastercardHelocDebitStandard = new CardProductSubCategory("MHD");

        /// <summary>
        /// MasterCard HSA Non-Substantiated
        /// </summary>
        public static CardProductSubCategory MastercardHsaNonSubstantiated = new CardProductSubCategory("MHH");

        /// <summary>
        /// MasterCard Magna Health Access Card
        /// </summary>
        public static CardProductSubCategory MastercardMagnaHealthAccessCard = new CardProductSubCategory("MHK");

        /// <summary>
        /// MasterCard HELOC Debit Gold
        /// </summary>
        public static CardProductSubCategory MastercardHelocDebitGold = new CardProductSubCategory("MHL");

        /// <summary>
        /// MasterCard HELOC Debit Platinum
        /// </summary>
        public static CardProductSubCategory MastercardHelocDebitPlatinum = new CardProductSubCategory("MHM");

        /// <summary>
        /// MasterCard HELOC Debit Premium
        /// </summary>
        public static CardProductSubCategory MastercardHelocDebitPremium = new CardProductSubCategory("MHN");

        /// <summary>
        /// MasterCard Prepaid Unembossed Student Card
        /// </summary>
        public static CardProductSubCategory MastercardPrepaidUnembossedStudentCard = new CardProductSubCategory("MIA");

        /// <summary>
        /// MasterCard Prepaid Student Card
        /// </summary>
        public static CardProductSubCategory MastercardPrepaidStudentCard = new CardProductSubCategory("MIP");

        /// <summary>
        /// MasterCard Debit Unembossed (Non-US)
        /// </summary>
        public static CardProductSubCategory MastercardDebitUnembossedNonUs = new CardProductSubCategory("MIU");

        /// <summary>
        /// MasterCard Central Travel Solutions Air Card
        /// </summary>
        public static CardProductSubCategory MastercardCentralTravelSolutionsAirCard = new CardProductSubCategory("MLA");

        /// <summary>
        /// MasterCard Brazil Benefit for Home Improvement
        /// </summary>
        public static CardProductSubCategory MastercardBrazilBenefitForHomeImprovement = new CardProductSubCategory("MLB");

        /// <summary>
        /// MasterCard Distribution Card
        /// </summary>
        public static CardProductSubCategory MastercardDistributionCard = new CardProductSubCategory("MLD");

        /// <summary>
        /// MasterCard Brazil General Benefits
        /// </summary>
        public static CardProductSubCategory MastercardBrazilGeneralBenefits = new CardProductSubCategory("MLE");

        /// <summary>
        /// MasterCard Agro
        /// </summary>
        public static CardProductSubCategory MastercardAgro = new CardProductSubCategory("MLF");

        /// <summary>
        /// MasterCard Central Travel Solutions Land Card
        /// </summary>
        public static CardProductSubCategory MastercardCentralTravelSolutionsLandCard = new CardProductSubCategory("MLL");

        /// <summary>
        /// MasterCard Public Sector Commercial Card
        /// </summary>
        public static CardProductSubCategory MastercardPublicSectorCommercialCard = new CardProductSubCategory("MNF");

        /// <summary>
        /// MasterCard World Card
        /// </summary>
        public static CardProductSubCategory MastercardWorldCard = new CardProductSubCategory("MNW");

        /// <summary>
        /// MasterCard Standard Maestro Social
        /// </summary>
        public static CardProductSubCategory MastercardStandardMaestroSocial = new CardProductSubCategory("MOC");

        /// <summary>
        /// MasterCard Maestro Gold Card
        /// </summary>
        public static CardProductSubCategory MastercardMaestroGoldCard = new CardProductSubCategory("MOG");

        /// <summary>
        /// MasterCard Maestro Platinum
        /// </summary>
        public static CardProductSubCategory MastercardMaestroPlatinum = new CardProductSubCategory("MOP");

        /// <summary>
        /// MasterCard World Maestro
        /// </summary>
        public static CardProductSubCategory MastercardWorldMaestro = new CardProductSubCategory("MOW");

        /// <summary>
        /// MasterCard Prepaid Debit Standard Payroll
        /// </summary>
        public static CardProductSubCategory MastercardPrepaidDebitStandardPayroll = new CardProductSubCategory("MPA");

        /// <summary>
        /// MasterCard Preferred Business Card
        /// </summary>
        public static CardProductSubCategory MastercardPreferredBusinessCard = new CardProductSubCategory("MPB");

        /// <summary>
        /// MasterCard Prepaid Debit Standard Gift
        /// </summary>
        public static CardProductSubCategory MastercardPrepaidDebitStandardGift = new CardProductSubCategory("MPF");

        /// <summary>
        /// MasterCard Debit Standard Prepaid General Spend
        /// </summary>
        public static CardProductSubCategory MastercardDebitStandardPrepaidGeneralSpend = new CardProductSubCategory("MPG");

        /// <summary>
        /// MasterCard Cash
        /// </summary>
        public static CardProductSubCategory MastercardCash = new CardProductSubCategory("MPH");

        /// <summary>
        /// MasterCard Prepaid Debit Voucher Meal/Food Card
        /// </summary>
        public static CardProductSubCategory MastercardPrepaidDebitVoucherMealFoodCard = new CardProductSubCategory("MPJ");

        /// <summary>
        /// MasterCard Prepaid Government Commercial Card
        /// </summary>
        public static CardProductSubCategory MastercardPrepaidGovernmentCommercialCard = new CardProductSubCategory("MPK");

        /// <summary>
        /// MasterCard Platinum Card
        /// </summary>
        public static CardProductSubCategory MastercardPlatinumCard = new CardProductSubCategory("MPL");

        /// <summary>
        /// MasterCard Prepaid Debit Standard Consumer Incentive
        /// </summary>
        public static CardProductSubCategory MastercardPrepaidDebitStandardConsumerIncentive = new CardProductSubCategory("MPM");

        /// <summary>
        /// MasterCard Prepaid Debit Standard Insurance
        /// </summary>
        public static CardProductSubCategory MastercardPrepaidDebitStandardInsurance = new CardProductSubCategory("MPN");

        /// <summary>
        /// MasterCard Prepaid Debit Standard Other
        /// </summary>
        public static CardProductSubCategory MastercardPrepaidDebitStandardOther = new CardProductSubCategory("MPO");

        /// <summary>
        /// MasterCard Prepaid Card
        /// </summary>
        public static CardProductSubCategory MastercardPrepaidCard = new CardProductSubCategory("MPP");

        /// <summary>
        /// MasterCard Prepaid Debit Standard Travel
        /// </summary>
        public static CardProductSubCategory MastercardPrepaidDebitStandardTravel = new CardProductSubCategory("MPR");

        /// <summary>
        /// MasterCard Prepaid Debit Standard Teen
        /// </summary>
        public static CardProductSubCategory MastercardPrepaidDebitStandardTeen = new CardProductSubCategory("MPT");

        /// <summary>
        /// MasterCard Prepaid Debit Standard Government
        /// </summary>
        public static CardProductSubCategory MastercardPrepaidDebitStandardGovernment = new CardProductSubCategory("MPV");

        /// <summary>
        /// MasterCard Debit Business Card Prepaid Workplace Business to Business
        /// </summary>
        public static CardProductSubCategory MastercardDebitBusinessCardPrepaidWorkplaceBusinessToBusiness = new CardProductSubCategory("MPW");

        /// <summary>
        /// MasterCard Prepaid Debit Standard Flex Benefit
        /// </summary>
        public static CardProductSubCategory MastercardPrepaidDebitStandardFlexBenefit = new CardProductSubCategory("MPX");

        /// <summary>
        /// MasterCard Prepaid Debit Standard Employee Incentive
        /// </summary>
        public static CardProductSubCategory MastercardPrepaidDebitStandardEmployeeIncentive = new CardProductSubCategory("MPY");

        /// <summary>
        /// MasterCard Prepaid Debit Standard Government Consumer
        /// </summary>
        public static CardProductSubCategory MastercardPrepaidDebitStandardGovernmentConsumer = new CardProductSubCategory("MPZ");

        /// <summary>
        /// MasterCard Prepaid Electronic Card (Non-US)
        /// </summary>
        public static CardProductSubCategory MastercardPrepaidElectronicCardNonUs = new CardProductSubCategory("MRC");

        /// <summary>
        /// MasterCard Standard Deferred
        /// </summary>
        public static CardProductSubCategory MastercardStandardDeferred = new CardProductSubCategory("MRF");

        /// <summary>
        /// MasterCard Prepaid Card (Non-US)
        /// </summary>
        public static CardProductSubCategory MastercardPrepaidCardNonUs = new CardProductSubCategory("MRG");

        /// <summary>
        /// MasterCard Platinum Prepaid Travel Card
        /// </summary>
        public static CardProductSubCategory MastercardPlatinumPrepaidTravelCard = new CardProductSubCategory("MRH");

        /// <summary>
        /// MasterCard Prepaid MasterCard Voucher Meal/Food Card
        /// </summary>
        public static CardProductSubCategory MastercardPrepaidMastercardVoucherMealFoodCard = new CardProductSubCategory("MRJ");

        /// <summary>
        /// MasterCard Prepaid MasterCard Public Sector Commercial Card
        /// </summary>
        public static CardProductSubCategory MastercardPrepaidMastercardPublicSectorCommercialCard = new CardProductSubCategory("MRK");

        /// <summary>
        /// MasterCard Rewards Only
        /// </summary>
        public static CardProductSubCategory MastercardRewardsOnly = new CardProductSubCategory("MRO");

        /// <summary>
        /// MasterCard Prepaid Business Preferred
        /// </summary>
        public static CardProductSubCategory MastercardPrepaidBusinessPreferred = new CardProductSubCategory("MRL");

        /// <summary>
        /// MasterCard Standard Retailer Centric Payments
        /// </summary>
        public static CardProductSubCategory MastercardStandardRetailerCentricPayments = new CardProductSubCategory("MRP");

        /// <summary>
        /// MasterCard Prepaid Business Card (Non-US)
        /// </summary>
        public static CardProductSubCategory MastercardPrepaidBusinessCardNonUs = new CardProductSubCategory("MRW");

        /// <summary>
        /// MasterCard Prepaid Maestro Payroll Card
        /// </summary>
        public static CardProductSubCategory MastercardPrepaidMaestroPayrollCard = new CardProductSubCategory("MSA");

        /// <summary>
        /// MasterCard Maestro Small Business Card
        /// </summary>
        public static CardProductSubCategory MastercardMaestroSmallBusinessCard = new CardProductSubCategory("MSB");

        /// <summary>
        /// MasterCard Prepaid Maestro Gift Card
        /// </summary>
        public static CardProductSubCategory MastercardPrepaidMaestroGiftCard = new CardProductSubCategory("MSF");

        /// <summary>
        /// MasterCard Prepaid Maestro Consumer Reloadable Card
        /// </summary>
        public static CardProductSubCategory MastercardPrepaidMaestroConsumerReloadableCard = new CardProductSubCategory("MSG");

        /// <summary>
        /// MasterCard Maestro Card
        /// </summary>
        public static CardProductSubCategory MastercardMaestroCard = new CardProductSubCategory("MSI");

        /// <summary>
        /// MasterCard Maestro Prepaid Voucher Meal and Food Card
        /// </summary>
        public static CardProductSubCategory MastercardMaestroPrepaidVoucherMealAndFoodCard = new CardProductSubCategory("MSJ");

        /// <summary>
        /// MasterCard Maestro Prepaid Consumer Promotion Card
        /// </summary>
        public static CardProductSubCategory MastercardMaestroPrepaidConsumerPromotionCard = new CardProductSubCategory("MSM");

        /// <summary>
        /// MasterCard Maestro Prepaid Insurance Card
        /// </summary>
        public static CardProductSubCategory MastercardMaestroPrepaidInsuranceCard = new CardProductSubCategory("MSN");

        /// <summary>
        /// MasterCard Maestro Prepaid Other Card
        /// </summary>
        public static CardProductSubCategory MastercardMaestroPrepaidOtherCard = new CardProductSubCategory("MSO");

        /// <summary>
        /// MasterCard Reserved for future use
        /// </summary>
        public static CardProductSubCategory MastercardReservedForFutureUse = new CardProductSubCategory("MSQ");

        /// <summary>
        /// MasterCard Prepaid Maestro Travel Card
        /// </summary>
        public static CardProductSubCategory MastercardPrepaidMaestroTravelCard = new CardProductSubCategory("MSR");

        /// <summary>
        /// MasterCard Prepaid Maestro Teen Card
        /// </summary>
        public static CardProductSubCategory MastercardPrepaidMaestroTeenCard = new CardProductSubCategory("MST");

        /// <summary>
        /// MasterCard Prepaid Maestro Government Benefit Card
        /// </summary>
        public static CardProductSubCategory MastercardPrepaidMaestroGovernmentBenefitCard = new CardProductSubCategory("MSV");

        /// <summary>
        /// MasterCard Prepaid Maestro Corporate Card
        /// </summary>
        public static CardProductSubCategory MastercardPrepaidMaestroCorporateCard = new CardProductSubCategory("MSW");

        /// <summary>
        /// MasterCard Prepaid Maestro Flex Benefit Card
        /// </summary>
        public static CardProductSubCategory MastercardPrepaidMaestroFlexBenefitCard = new CardProductSubCategory("MSX");

        /// <summary>
        /// MasterCard Prepaid Maestro Employee Incentive Card
        /// </summary>
        public static CardProductSubCategory MastercardPrepaidMaestroEmployeeIncentiveCard = new CardProductSubCategory("MSY");

        /// <summary>
        /// MasterCard Prepaid Maestro Emergency Assistance Card
        /// </summary>
        public static CardProductSubCategory MastercardPrepaidMaestroEmergencyAssistanceCard = new CardProductSubCategory("MSZ");

        /// <summary>
        /// MasterCard Platinum Prepaid Travel Card
        /// </summary>
        public static CardProductSubCategory MastercardPlatinumPrepaidTravelCard2 = new CardProductSubCategory("MTP");

        /// <summary>
        /// MasterCard World Domestic Affluent
        /// </summary>
        public static CardProductSubCategory MastercardWorldDomesticAffluent = new CardProductSubCategory("MUW");

        /// <summary>
        /// MasterCard World for Business Card
        /// </summary>
        public static CardProductSubCategory MastercardWorldForBusinessCard = new CardProductSubCategory("MWB");

        /// <summary>
        /// MasterCard World Deferred
        /// </summary>
        public static CardProductSubCategory MastercardWorldDeferred = new CardProductSubCategory("MWD");

        /// <summary>
        /// MasterCard World Elite
        /// </summary>
        public static CardProductSubCategory MastercardWorldElite = new CardProductSubCategory("MWE");

        /// <summary>
        /// MasterCard World Elite Corporate Card
        /// </summary>
        public static CardProductSubCategory MastercardWorldEliteCorporateCard = new CardProductSubCategory("MWO");

        /// <summary>
        /// MasterCard World Retailer Centric Pauments
        /// </summary>
        public static CardProductSubCategory MastercardWorldRetailerCentricPauments = new CardProductSubCategory("MWR");

        /// <summary>
        /// MasterCard Maestro Small Businss Delayed Debit
        /// </summary>
        public static CardProductSubCategory MastercardMaestroSmallBusinssDelayedDebit = new CardProductSubCategory("OLB");

        /// <summary>
        /// MasterCard Maestro Gold Delayed Debit
        /// </summary>
        public static CardProductSubCategory MastercardMaestroGoldDelayedDebit = new CardProductSubCategory("OLG");

        /// <summary>
        /// MasterCard Maestro Platinum Delayed Debit
        /// </summary>
        public static CardProductSubCategory MastercardMaestroPlatinumDelayedDebit = new CardProductSubCategory("OLP");

        /// <summary>
        /// MasterCard Maestro Delayed Debit
        /// </summary>
        public static CardProductSubCategory MastercardMaestroDelayedDebit = new CardProductSubCategory("OLS");

        /// <summary>
        /// MasterCard World Maestro Delayed Debit
        /// </summary>
        public static CardProductSubCategory MastercardWorldMaestroDelayedDebit = new CardProductSubCategory("OLW");

        /// <summary>
        /// MasterCard Proprietary Credit Card (Sweden domestic)
        /// </summary>
        public static CardProductSubCategory MastercardProprietaryCreditCardSwedenDomestic = new CardProductSubCategory("PMC");

        /// <summary>
        /// MasterCard Proprietary Debit Card (Sweden domestic)
        /// </summary>
        public static CardProductSubCategory MastercardProprietaryDebitCardSwedenDomestic = new CardProductSubCategory("PMD");

        /// <summary>
        /// MasterCard Common Proprietary Swedish Credit Card
        /// </summary>
        public static CardProductSubCategory MastercardCommonProprietarySwedishCreditCard = new CardProductSubCategory("PSC");

        /// <summary>
        /// MasterCard Common Proprietary Swedish Debit Card
        /// </summary>
        public static CardProductSubCategory MastercardCommonProprietarySwedishDebitCard = new CardProductSubCategory("PSD");

        /// <summary>
        /// MasterCard Private Label A
        /// </summary>
        public static CardProductSubCategory MastercardPrivateLabelA = new CardProductSubCategory("PVA");

        /// <summary>
        /// MasterCard Private Label B
        /// </summary>
        public static CardProductSubCategory MastercardPrivateLabelB = new CardProductSubCategory("PVB");

        /// <summary>
        /// MasterCard Private Label C
        /// </summary>
        public static CardProductSubCategory MastercardPrivateLabelC = new CardProductSubCategory("PVC");

        /// <summary>
        /// MasterCard Private Label D
        /// </summary>
        public static CardProductSubCategory MastercardPrivateLabelD = new CardProductSubCategory("PVD");

        /// <summary>
        /// MasterCard Private Label E
        /// </summary>
        public static CardProductSubCategory MastercardPrivateLabelE = new CardProductSubCategory("PVE");

        /// <summary>
        /// MasterCard Private Label F
        /// </summary>
        public static CardProductSubCategory MastercardPrivateLabelF = new CardProductSubCategory("PVF");

        /// <summary>
        /// MasterCard Private Label G
        /// </summary>
        public static CardProductSubCategory MastercardPrivateLabelG = new CardProductSubCategory("PVG");

        /// <summary>
        /// MasterCard Private Label H
        /// </summary>
        public static CardProductSubCategory MastercardPrivateLabelH = new CardProductSubCategory("PVH");

        /// <summary>
        /// MasterCard Private Label I
        /// </summary>
        public static CardProductSubCategory MastercardPrivateLabelI = new CardProductSubCategory("PVI");

        /// <summary>
        /// MasterCard Private Label J
        /// </summary>
        public static CardProductSubCategory MastercardPrivateLabelJ = new CardProductSubCategory("PVJ");

        /// <summary>
        /// MasterCard Private Label L
        /// </summary>
        public static CardProductSubCategory MastercardPrivateLabelL = new CardProductSubCategory("PVL");

        /// <summary>
        /// MasterCard Gold Salary Immediate Debit
        /// </summary>
        public static CardProductSubCategory MastercardGoldSalaryImmediateDebit = new CardProductSubCategory("SAG");

        /// <summary>
        /// MasterCard Standard Maestro Salary
        /// </summary>
        public static CardProductSubCategory MastercardStandardMaestroSalary = new CardProductSubCategory("SAL");

        /// <summary>
        /// MasterCard Platinum Salary Immediate Debit
        /// </summary>
        public static CardProductSubCategory MastercardPlatinumSalaryImmediateDebit = new CardProductSubCategory("SAP");

        /// <summary>
        /// MasterCard Standard Salary Immediate Debit
        /// </summary>
        public static CardProductSubCategory MastercardStandardSalaryImmediateDebit = new CardProductSubCategory("SAS");

        /// <summary>
        /// MasterCard Standard Social Immediate Debit
        /// </summary>
        public static CardProductSubCategory MastercardStandardSocialImmediateDebit = new CardProductSubCategory("SOS");

        /// <summary>
        /// MasterCard Prepaid Unembossed Card (Non-US)
        /// </summary>
        public static CardProductSubCategory MastercardPrepaidUnembossedCardNonUs = new CardProductSubCategory("SUR");

        /// <summary>
        /// MasterCard Electronic Business Immediate Debit
        /// </summary>
        public static CardProductSubCategory MastercardElectronicBusinessImmediateDebit = new CardProductSubCategory("TBE");

        /// <summary>
        /// MasterCard Corporate Executive Business Card Immediate Debit
        /// </summary>
        public static CardProductSubCategory MastercardCorporateExecutiveBusinessCardImmediateDebit = new CardProductSubCategory("TCB");

        /// <summary>
        /// MasterCard (mixed BIN) Immediate Debit
        /// </summary>
        public static CardProductSubCategory MastercardMixedBinImmediateDebit = new CardProductSubCategory("TCC");

        /// <summary>
        /// MasterCard Electronic Immediate Debit
        /// </summary>
        public static CardProductSubCategory MastercardElectronicImmediateDebit = new CardProductSubCategory("TCE");

        /// <summary>
        /// MasterCard Fleet Card Immediate Debit
        /// </summary>
        public static CardProductSubCategory MastercardFleetCardImmediateDebit = new CardProductSubCategory("TCF");

        /// <summary>
        /// MasterCard Gold Card Immediate Debit
        /// </summary>
        public static CardProductSubCategory MastercardGoldCardImmediateDebit = new CardProductSubCategory("TCG");

        /// <summary>
        /// MasterCard Corporate Immediate Debit
        /// </summary>
        public static CardProductSubCategory MastercardCorporateImmediateDebit = new CardProductSubCategory("TCO");

        /// <summary>
        /// MasterCard Purchasing Card Immediate Debit
        /// </summary>
        public static CardProductSubCategory MastercardPurchasingCardImmediateDebit = new CardProductSubCategory("TCP");

        /// <summary>
        /// MasterCard Standard Card Immediate Debit
        /// </summary>
        public static CardProductSubCategory MastercardStandardCardImmediateDebit = new CardProductSubCategory("TCS");

        /// <summary>
        /// MasterCard World Signia Card Immediate Debit
        /// </summary>
        public static CardProductSubCategory MastercardWorldSigniaCardImmediateDebit = new CardProductSubCategory("TCW");

        /// <summary>
        /// MasterCard Executive BusinessCard Card
        /// </summary>
        public static CardProductSubCategory MastercardExecutiveBusinesscardCard = new CardProductSubCategory("TEB");

        /// <summary>
        /// MasterCard Electronic Commercial Immediate Debit
        /// </summary>
        public static CardProductSubCategory MastercardElectronicCommercialImmediateDebit = new CardProductSubCategory("TEC");

        /// <summary>
        /// MasterCard Corporate Executive Card Immediate Debit
        /// </summary>
        public static CardProductSubCategory MastercardCorporateExecutiveCardImmediateDebit = new CardProductSubCategory("TEO");

        /// <summary>
        /// MasterCard Public Sector Commercial Card Immediate Debit
        /// </summary>
        public static CardProductSubCategory MastercardPublicSectorCommercialCardImmediateDebit = new CardProductSubCategory("TNF");

        /// <summary>
        /// MasterCard New World Immediate Debit
        /// </summary>
        public static CardProductSubCategory MastercardNewWorldImmediateDebit = new CardProductSubCategory("TNW");

        /// <summary>
        /// MasterCard Preferred Business Card Immediate Debit
        /// </summary>
        public static CardProductSubCategory MastercardPreferredBusinessCardImmediateDebit = new CardProductSubCategory("TPB");

        /// <summary>
        /// MasterCard Platinum Immediate Debit
        /// </summary>
        public static CardProductSubCategory MastercardPlatinumImmediateDebit = new CardProductSubCategory("TPL");

        /// <summary>
        /// MasterCard World Black Edition Immediate Debit
        /// </summary>
        public static CardProductSubCategory MastercardWorldBlackEditionImmediateDebit = new CardProductSubCategory("TWB");

        /// <summary>
        /// MasterCard World Black Edition
        /// </summary>
        public static CardProductSubCategory MastercardWorldBlackEdition = new CardProductSubCategory("WBE");
	}
	public partial struct Regulated : IComparable<Regulated>, IEquatable<Regulated>
	{
		
		public int CompareTo(Regulated other)
        {
            return StringComparer.InvariantCulture.Compare(Value, other.Value);
        }

        public bool Equals(Regulated other)
        {
            return StringComparer.InvariantCulture.Equals(Value, other.Value);
        }

        public static bool operator ==(Regulated a, Regulated b)
        {
            return a.Equals(b);
        }

        public static bool operator !=(Regulated a, Regulated b)
        {
            return !(a == b);
        }

        public override bool Equals(object obj)
        {
            var other = obj as Regulated?;
            if (other == null)
                return false;

            return this.Equals(other.Value);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }

        public override string ToString()
        {
            return Value;
        }

        public string Value { get; }

        public Regulated(string value)
        {
            Value = value;
        }

        public bool IsSet { get { return !string.IsNullOrEmpty(Value); }}

        /// <summary>
        /// ISS Regulated Issuer
        /// </summary>
        public static Regulated IssRegulatedIssuer = new Regulated("B");

        /// <summary>
        /// ISS Non-Regulated Issuer or Non-US issued card
        /// </summary>
        public static Regulated IssNonRegulatedIssuerOrNonUsIssuedCard = new Regulated("N");

        /// <summary>
        /// ISS Regulated Issuer with fraud
        /// </summary>
        public static Regulated IssRegulatedIssuerWithFraud = new Regulated("1");
	}
	public partial struct Subtype : IComparable<Subtype>, IEquatable<Subtype>
	{
		
		public int CompareTo(Subtype other)
        {
            return StringComparer.InvariantCulture.Compare(Value, other.Value);
        }

        public bool Equals(Subtype other)
        {
            return StringComparer.InvariantCulture.Equals(Value, other.Value);
        }

        public static bool operator ==(Subtype a, Subtype b)
        {
            return a.Equals(b);
        }

        public static bool operator !=(Subtype a, Subtype b)
        {
            return !(a == b);
        }

        public override bool Equals(object obj)
        {
            var other = obj as Subtype?;
            if (other == null)
                return false;

            return this.Equals(other.Value);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }

        public override string ToString()
        {
            return Value;
        }

        public string Value { get; }

        public Subtype(string value)
        {
            Value = value;
        }

        public bool IsSet { get { return !string.IsNullOrEmpty(Value); }}

        /// <summary>
        /// Brazil Agriculture Maintenance Account/Custeio
        /// </summary>
        public static Subtype BrazilAgricultureMaintenanceAccountCusteio = new Subtype("AC");

        /// <summary>
        /// Brazil Agriculture Debit Account/Electron
        /// </summary>
        public static Subtype BrazilAgricultureDebitAccountElectron = new Subtype("AE");

        /// <summary>
        /// Brazil Agriculture
        /// </summary>
        public static Subtype BrazilAgriculture = new Subtype("AG");

        /// <summary>
        /// Brazil Agriculture Investment Loan/Investimento
        /// </summary>
        public static Subtype BrazilAgricultureInvestmentLoanInvestimento = new Subtype("AI");

        /// <summary>
        /// Brazil Cargo
        /// </summary>
        public static Subtype BrazilCargo = new Subtype("CG");

        /// <summary>
        /// Construction
        /// </summary>
        public static Subtype Construction = new Subtype("CS");

        /// <summary>
        /// Distribution
        /// </summary>
        public static Subtype Distribution = new Subtype("DS");

        /// <summary>
        /// Healthcare
        /// </summary>
        public static Subtype Healthcare = new Subtype("HC");

        /// <summary>
        /// Visa large-Purchase Advantage
        /// </summary>
        public static Subtype VisaLargePurchaseAdvantage = new Subtype("LP");

        /// <summary>
        /// Visa Mobile Agent
        /// </summary>
        public static Subtype VisaMobileAgent = new Subtype("MA");

        /// <summary>
        /// Interoperable Mobile Branchless Banking
        /// </summary>
        public static Subtype InteroperableMobileBranchlessBanking = new Subtype("MB");

        /// <summary>
        /// Visa Mobile General
        /// </summary>
        public static Subtype VisaMobileGeneral = new Subtype("MG");

        /// <summary>
        /// Brazil Food or Supermarket
        /// </summary>
        public static Subtype BrazilFoodOrSupermarket = new Subtype("VA");

        /// <summary>
        /// Brazil Fuel / Flex Visa Vale
        /// </summary>
        public static Subtype BrazilFuelFlexVisaVale = new Subtype("VF");

        /// <summary>
        /// Brazil Food or Restaurant
        /// </summary>
        public static Subtype BrazilFoodOrRestaurant = new Subtype("VR");
	}
	public partial struct LargeTicket : IComparable<LargeTicket>, IEquatable<LargeTicket>
	{
		
		public int CompareTo(LargeTicket other)
        {
            return StringComparer.InvariantCulture.Compare(Value, other.Value);
        }

        public bool Equals(LargeTicket other)
        {
            return StringComparer.InvariantCulture.Equals(Value, other.Value);
        }

        public static bool operator ==(LargeTicket a, LargeTicket b)
        {
            return a.Equals(b);
        }

        public static bool operator !=(LargeTicket a, LargeTicket b)
        {
            return !(a == b);
        }

        public override bool Equals(object obj)
        {
            var other = obj as LargeTicket?;
            if (other == null)
                return false;

            return this.Equals(other.Value);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }

        public override string ToString()
        {
            return Value;
        }

        public string Value { get; }

        public LargeTicket(string value)
        {
            Value = value;
        }

        public bool IsSet { get { return !string.IsNullOrEmpty(Value); }}

        /// <summary>
        /// Visa Large Ticket
        /// </summary>
        public static LargeTicket VisaLargeTicket = new LargeTicket("L");

        /// <summary>
        /// Not Visa Large Ticket
        /// </summary>
        public static LargeTicket NotVisaLargeTicket = new LargeTicket(" ");
	}
	public partial struct AccountLevelProcessing : IComparable<AccountLevelProcessing>, IEquatable<AccountLevelProcessing>
	{
		
		public int CompareTo(AccountLevelProcessing other)
        {
            return StringComparer.InvariantCulture.Compare(Value, other.Value);
        }

        public bool Equals(AccountLevelProcessing other)
        {
            return StringComparer.InvariantCulture.Equals(Value, other.Value);
        }

        public static bool operator ==(AccountLevelProcessing a, AccountLevelProcessing b)
        {
            return a.Equals(b);
        }

        public static bool operator !=(AccountLevelProcessing a, AccountLevelProcessing b)
        {
            return !(a == b);
        }

        public override bool Equals(object obj)
        {
            var other = obj as AccountLevelProcessing?;
            if (other == null)
                return false;

            return this.Equals(other.Value);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }

        public override string ToString()
        {
            return Value;
        }

        public string Value { get; }

        public AccountLevelProcessing(string value)
        {
            Value = value;
        }

        public bool IsSet { get { return !string.IsNullOrEmpty(Value); }}

        /// <summary>
        /// Account Level Processing
        /// </summary>
        public static AccountLevelProcessing Yes = new AccountLevelProcessing("Y");

        /// <summary>
        /// No Account Level Processing
        /// </summary>
        public static AccountLevelProcessing No = new AccountLevelProcessing(" ");

        /// <summary>
        /// Not applicable for BIN
        /// </summary>
        public static AccountLevelProcessing NotApplicableForBin = new AccountLevelProcessing("N");
	}
	public partial struct AccountFundSource : IComparable<AccountFundSource>, IEquatable<AccountFundSource>
	{
		
		public int CompareTo(AccountFundSource other)
        {
            return StringComparer.InvariantCulture.Compare(Value, other.Value);
        }

        public bool Equals(AccountFundSource other)
        {
            return StringComparer.InvariantCulture.Equals(Value, other.Value);
        }

        public static bool operator ==(AccountFundSource a, AccountFundSource b)
        {
            return a.Equals(b);
        }

        public static bool operator !=(AccountFundSource a, AccountFundSource b)
        {
            return !(a == b);
        }

        public override bool Equals(object obj)
        {
            var other = obj as AccountFundSource?;
            if (other == null)
                return false;

            return this.Equals(other.Value);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }

        public override string ToString()
        {
            return Value;
        }

        public string Value { get; }

        public AccountFundSource(string value)
        {
            Value = value;
        }

        public bool IsSet { get { return !string.IsNullOrEmpty(Value); }}

        /// <summary>
        /// Credit
        /// </summary>
        public static AccountFundSource Credit = new AccountFundSource("C");

        /// <summary>
        /// Debit
        /// </summary>
        public static AccountFundSource Debit = new AccountFundSource("D");

        /// <summary>
        /// Prepaid
        /// </summary>
        public static AccountFundSource Prepaid = new AccountFundSource("P");

        /// <summary>
        /// Charge
        /// </summary>
        public static AccountFundSource Charge = new AccountFundSource("H");

        /// <summary>
        /// Deferred Debit (Visa Only)
        /// </summary>
        public static AccountFundSource DeferredDebitVisaOnly = new AccountFundSource("R");

        /// <summary>
        /// Network Only
        /// </summary>
        public static AccountFundSource NetworkOnly = new AccountFundSource(" ");
	}
}

